#+STARTUP:showall

* flines: plot streamlines in vtk files
  This is a program for plotting streamlines of 3D vector fields.  My
  goal is to be able to include lots of field lines without having the
  plot become confusing.  I wasn't happy with any of the plotting
  packages I tried, so I decided to write this code.  

  I settled on a method using brightly colored lines and an
  exaggerated sense of perspective -- I think this strikes a nice
  balance and shows the most detail in the field.  Check out the
  examples below to see if you agree.

  The project really comprises two codes: there's a c code which reads
  in the simulation data and integrates the field lines.  And there's
  a mathematica code which makes the plots.  Each can be used quite
  independently; see the implementation section below for more
  information.

* examples
  [[examples/ball.png]]
  [[examples/mti.png]]

  [[http://astro.berkeley.edu/~mkmcc/spaghetti.mov][movie]] of a ball of tangled field lines unwinding

  [[http://astro.berkeley.edu/~mkmcc/loop.mov][movie]] of a ball of field loops advecting through periodic boundary
  conditions

* implementation
  I integrate streamlines using a 4th order Runge-Kutta solver with
  an adaptive step size; I use linear interpolation to get the values
  of the vector field along the streamline.

  I attempt to cut off the integration when the streamlines either
  close, or become chaotic.  The latter is not necessary for still
  images, but essential for making movies.

  I plot the streamlines using a simple mathematica code.  It builds a
  "camera" matrix and uses it to project the lines onto an image
  plane.  I prefer a short-ish focal length to exaggerate the
  perspective.  I also scale the width and brightness of the lines
  with distance to make them look more 3D.

* usage
  I've only tested the c program with the [[https://trac.princeton.edu/Athena/][Athena]] MHD code, but it
  should work with any vtk file.  If not, only minor modifications
  should be needed to make it work.  The mathematica code is more
  general; it should plot any list of 3D points.

  To get started, you can clone this repository and run make:
  #+BEGIN_EXAMPLE
  git clone git@github.com:mkmcc/flines.git
  cd flines
  make
  #+END_EXAMPLE

  This produces a c program called =flines= which reads a vtk file
  and solves for the magnetic field lines.  There's a ruby script
  =mk-flines.rb= which runs the c program automatically.

  If you run your simulation under MPI, put =join_vtk.x= and
  =join-vtk.rb= in the simulation directory.  Running
  #+BEGIN_EXAMPLE
  ruby join-vtk.rb
  #+END_EXAMPLE
  makes a =merged= directory with the joined vtk files.  If you put
  =flines= and =mk-flines.rb= in the =merged= directory, you can
  solve for the field lines 
  #+BEGIN_EXAMPLE
  ruby mk-flines.rb
  #+END_EXAMPLE
  Then, copy over the =movie.m= script and run it
  #+BEGIN_EXAMPLE
  mash movie.m
  #+END_EXAMPLE
  (this using the awesome [[http://ai.eecs.umich.edu/people/dreeves/mash/][mash]] script).  This produces a series of
  images which you can make into a movie.

* status
  This code is an early prototype, and it may never mature beyond
  that.  In particular, it's written for my own working style and for
  the types of data I work with.  I've made no attempt to make this
  generally applicable or in any way user-friendly.

  That being said, you are of course free to use this code if you
  like.  And I welcome patches, bug reports, or feature requests.  At
  the moment, I just don't have the resources to turn this into a
  finished application.
